@page "/counter"
@page "/counter/{CurrentCount:int}"
@layout CounterLayout
@inject NavigationManager uriHelper
@inject IJSRuntime JSRuntime
@using BlazingExperiments.Client.Services
@inject ILocalStorage LocalStorage

<h2>Counter 1</h2>
<p class="@colorStyle @align"> Current count: @CurrentCount</p>
<p>
    <button class="btn btn-primary" @onclick="IncrementCount" disabled="@(CurrentCount >=1000)">Click me</button> 
    <button class="btn btn-success" @onclick="StartFrom50">Start From 50</button>
</p>

@code {


    protected override async Task OnInitializedAsync()
    {
        await LocalStorage.WatchAsync(this);
        int? c = await LocalStorage.GetProperty<int?>(nameof(CurrentCount));
        if(c.HasValue)
        {
            CurrentCount = c.Value;
        }

    }



    private string colorStyle = "blue-color";
    private string align = "left";
    private int currentCount = 0;

    [JSInvokable]
    public async Task UpdateCounter()
    {
        Console.WriteLine("Update");
        int? c = await LocalStorage.GetProperty<int>(nameof(CurrentCount));
        if(c.HasValue)
        {
            currentCount = c.Value;
        }
        this.StateHasChanged();
    }


    [Parameter]
    public int CurrentCount {
        get => currentCount;
        set
        {
            if (currentCount != value)
            {
                currentCount = value;
                LocalStorage.SetProperty<int>(nameof(CurrentCount), currentCount);
            }
        }
    }

   
    private void IncrementCount()
    {
        CurrentCount++;
        colorStyle = CurrentCount >= 100 ? colorStyle = "red-color" : "blue-color";
        align = CurrentCount % 2 == 0 ? align = "left" : "right";
    }

    private void StartFrom50() => uriHelper.NavigateTo("/counter/50");
}
